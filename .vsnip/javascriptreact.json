{
  "reactFunctionComponent": {
    "prefix": "rfc",
    "body": "const ${TM_FILENAME_BASE} = () => (\n\t$1\n);\n\nexport default ${TM_FILENAME_BASE};",
    "description": "Creates a React function component"
  },
  "reactFunctionComponentWithReturn": {
    "prefix": "rfcr",
    "body": "const ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t$1\n\t);\n};\n\nexport default ${TM_FILENAME_BASE};",
    "description": "Creates a React function component with a return"
  },
  "reactFunctionComponentWithProps": {
    "prefix": "rfcp",
    "body": "import PropTypes from 'prop-types';\n\nconst ${TM_FILENAME_BASE} = () => (\n\t$1\n);\n\n${TM_FILENAME_BASE}.defaultProps = {};\n\n${TM_FILENAME_BASE}.propTypes = {};\n\nexport default ${TM_FILENAME_BASE};",
    "description": "Creates a React function component with PropTypes"
  },
  "reactFunctionComponentWithReturnWithProps": {
    "prefix": "rfcrp",
    "body": "import PropTypes from 'prop-types';\n\nconst ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t$1\n\t);\n};\n\n${TM_FILENAME_BASE}.defaultProps = {};\n\n${TM_FILENAME_BASE}.propTypes = {};\n\nexport default ${TM_FILENAME_BASE};",
    "description": "Creates a React function component with a return and PropTypes"
  },
  "propTypes": {
    "prefix": "rpt",
    "body": "$1.propTypes = {\n\t$2\n};",
    "description": "Creates empty propTypes declaration"
  },
  "defaultProps": {
    "prefix": "rdp",
    "body": "$1.defaultProps = {\n\t$2\n};",
    "description": "Creates empty defaultProps declaration"
  },
  "propTypeArray": {
    "prefix": "pta",
    "body": "PropTypes.array,",
    "description": "Array prop type"
  },
  "propTypeArrayRequired": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,",
    "description": "Array prop type required"
  },
  "propTypeBool": {
    "prefix": "ptb",
    "body": "PropTypes.bool,",
    "description": "Bool prop type"
  },
  "propTypeBoolRequired": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,",
    "description": "Bool prop type required"
  },
  "propTypeFunc": {
    "prefix": "ptf",
    "body": "PropTypes.func,",
    "description": "Func prop type"
  },
  "propTypeFuncRequired": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,",
    "description": "Func prop type required"
  },
  "propTypeNumber": {
    "prefix": "ptn",
    "body": "PropTypes.number,",
    "description": "Number prop type"
  },
  "propTypeNumberRequired": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,",
    "description": "Number prop type required"
  },
  "propTypeObject": {
    "prefix": "pto",
    "body": "PropTypes.object,",
    "description": "Object prop type"
  },
  "propTypeObjectRequired": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,",
    "description": "Object prop type required"
  },
  "propTypeString": {
    "prefix": "pts",
    "body": "PropTypes.string,",
    "description": "String prop type"
  },
  "propTypeStringRequired": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,",
    "description": "String prop type required"
  },
  "propTypeNode": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "propTypeNodeRequired": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "propTypeElement": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React element prop type"
  },
  "propTypeElementRequired": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React element prop type required"
  },
  "propTypeInstanceOf": {
    "prefix": "pti",
    "body": "PropTypes.instanceOf($0),",
    "description": "Is an instance of a class prop type"
  },
  "propTypeInstanceOfRequired": {
    "prefix": "ptir",
    "body": "PropTypes.instanceOf($0).isRequired,",
    "description": "Is an instance of a class prop type required"
  },
  "propTypeEnum": {
    "prefix": "pte",
    "body": "PropTypes.oneOf(['$0']),",
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "propTypeEnumRequired": {
    "prefix": "pter",
    "body": "PropTypes.oneOf(['$0']).isRequired,",
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "propTypeOneOfType": {
    "prefix": "ptet",
    "body": "PropTypes.oneOfType([\n\t$0\n]),",
    "description": "An object that could be one of many types"
  },
  "propTypeOneOfTypeRequired": {
    "prefix": "ptetr",
    "body": "PropTypes.oneOfType([\n\t$0\n]).isRequired,",
    "description": "An object that could be one of many types required"
  },
  "propTypeArrayOf": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($0),",
    "description": "An array of a certain type"
  },
  "propTypeArrayOfRequired": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($0).isRequired,",
    "description": "An array of a certain type required"
  },
  "propTypeObjectOf": {
    "prefix": "ptoo",
    "body": "PropTypes.objectOf($0),",
    "description": "An object with property values of a certain type"
  },
  "propTypeObjectOfRequired": {
    "prefix": "ptoor",
    "body": "PropTypes.objectOf($0).isRequired,",
    "description": "An object with property values of a certain type required"
  },
  "propTypeShape": {
    "prefix": "ptsh",
    "body": "PropTypes.shape({\n\t$0\n}),",
    "description": "An object taking on a particular shape"
  },
  "propTypeShapeRequired": {
    "prefix": "ptshr",
    "body": "PropTypes.shape({\n\t$0\n}).isRequired,",
    "description": "An object taking on a particular shape required"
  },
  "useState": {
    "prefix": "us",
    "body": "const [$1] = useState();",
    "description": "use state hook"
  },
  "useEffect": {
    "prefix": "ue",
    "body": [
      "useEffect(() => {",
      "\t$1",
      "\t}",
      "}, []);"
    ],
    "description": "React useEffect() hook"
  },
  "useContext": {
    "prefix": "uc",
    "body": ["const $1 = useContext();"],
    "description": "React useContext() hook"
  },
  "useRef": {
    "prefix": "ur",
    "body": ["const ${1:elName}El = useRef(null);"],
    "description": "React useContext() hook"
  },
  "useCallback": {
    "prefix": "ucb",
    "body": "const ${1:memoizedCallback} = useCallback(() => {\n\n}, []);",
    "description": "React useCallback() hook"
  },
  "useMemo": {
    "prefix": "ume",
    "body": [
      "const ${1:memoizedValue} = useMemo(() => {\n\t\n}, []);"
    ],
    "description": "React useMemo() hook"
  }
}
